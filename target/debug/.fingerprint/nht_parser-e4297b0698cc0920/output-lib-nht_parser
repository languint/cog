{"$message_type":"diagnostic","message":"3 positional arguments in format string, but there are 2 arguments","code":null,"level":"error","spans":[{"file_name":"nht_parser/src/parser/errors.rs","byte_start":702,"byte_end":714,"line_start":29,"line_end":29,"column_start":26,"column_end":38,"is_primary":false,"text":[{"text":"    format!(\"[{}{}] {}\", ERROR_PREFIX, msg.0,)","highlight_start":26,"highlight_end":38}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"nht_parser/src/parser/errors.rs","byte_start":716,"byte_end":721,"line_start":29,"line_end":29,"column_start":40,"column_end":45,"is_primary":false,"text":[{"text":"    format!(\"[{}{}] {}\", ERROR_PREFIX, msg.0,)","highlight_start":40,"highlight_end":45}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"nht_parser/src/parser/errors.rs","byte_start":691,"byte_end":693,"line_start":29,"line_end":29,"column_start":15,"column_end":17,"is_primary":true,"text":[{"text":"    format!(\"[{}{}] {}\", ERROR_PREFIX, msg.0,)","highlight_start":15,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"nht_parser/src/parser/errors.rs","byte_start":693,"byte_end":695,"line_start":29,"line_end":29,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"    format!(\"[{}{}] {}\", ERROR_PREFIX, msg.0,)","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"nht_parser/src/parser/errors.rs","byte_start":697,"byte_end":699,"line_start":29,"line_end":29,"column_start":21,"column_end":23,"is_primary":true,"text":[{"text":"    format!(\"[{}{}] {}\", ERROR_PREFIX, msg.0,)","highlight_start":21,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: 3 positional arguments in format string, but there are 2 arguments\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mnht_parser/src/parser/errors.rs:29:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    format!(\"[{}{}] {}\", ERROR_PREFIX, msg.0,)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `int32` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"nht_parser/src/parser/errors.rs","byte_start":565,"byte_end":570,"line_start":25,"line_end":25,"column_start":15,"column_end":20,"is_primary":true,"text":[{"text":"    let msg: (int32, String) = match err {","highlight_start":15,"highlight_end":20}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `int32` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mnht_parser/src/parser/errors.rs:25:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let msg: (int32, String) = match err {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0412`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0412`.\u001b[0m\n"}
